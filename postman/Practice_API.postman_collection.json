{
  "info": {
    "name": "Practice API",
    "description": "Postman collection for Practice API. Uses collection variables and scripts to manage auth token and resource IDs. Import this along with the environment file in postman/Local.postman_environment.json.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": {"major": 1, "minor": 0, "patch": 0}
  },
  "variable": [
    {"key": "base_url", "value": "{{base_url}}", "type": "string"},
    {"key": "auth_token", "value": "", "type": "string"},
    {"key": "user_id", "value": "", "type": "string"}
  ],
  "auth": {
    "type": "bearer",
    "bearer": [{"key": "token", "value": "{{auth_token}}", "type": "string"}]
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register",
          "request": {
            "auth": {"type": "noauth"},
            "method": "POST",
            "header": [
              {"key": "Content-Type", "value": "application/json"}
            ],
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"new.user@example.com\",\n  \"password\": \"ChangeMe123!\",\n  \"mobileNumber\": \"3001234567\",\n  \"name\": \"New User\",\n  \"address\": \"123 Main St\"\n}"
            },
            "description": "Registers a new user. Returns 201 Created on success or 409 if email exists."
          },
          "response": []
        },
        {
          "name": "Login",
          "request": {
            "auth": {"type": "noauth"},
            "method": "POST",
            "header": [
              {"key": "Content-Type", "value": "application/json"}
            ],
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"new.user@example.com\",\n  \"password\": \"ChangeMe123!\"\n}"
            },
            "description": "Authenticates a user and returns an AuthResponse with a token."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "var json = pm.response.json();",
                  "pm.test('Token is present', function () { pm.expect(json.token).to.be.a('string').and.not.empty; });",
                  "pm.collectionVariables.set('auth_token', json.token);",
                  "pm.environment.set('auth_token', json.token); // if you prefer env variable"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {"key": "Content-Type", "value": "application/json"}
            ],
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"mobileNumber\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"address\": \"742 Evergreen Terrace\"\n}"
            },
            "description": "Creates a user. Returns 201 with UserResponse."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
                  "var json = pm.response.json();",
                  "pm.test('Contains id', function () { pm.expect(json.id).to.be.a('number'); });",
                  "pm.collectionVariables.set('user_id', json.id);"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{user_id}}"]
            },
            "description": "Gets a user by ID. Returns 200 or 404."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "var json = pm.response.json();",
                  "pm.test('ID matches', function () { pm.expect(json.id).to.equal(Number(pm.collectionVariables.get('user_id'))); });"
                ]
              }
            }
          ]
        },
        {
          "name": "List Users",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/users?page=0&size=20",
              "host": ["{{base_url}}"],
              "path": ["api", "users"],
              "query": [
                {"key": "page", "value": "0"},
                {"key": "size", "value": "20"}
              ]
            },
            "description": "Lists users with pagination. Returns Spring Page<UserResponse>."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "var json = pm.response.json();",
                  "pm.test('Has content array', function () { pm.expect(json.content).to.be.an('array'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {"key": "Content-Type", "value": "application/json"}
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{user_id}}"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.updated@example.com\",\n  \"mobileNumber\": \"9999999999\",\n  \"name\": \"John Updated\",\n  \"address\": \"Updated Address\"\n}"
            },
            "description": "Updates the user by ID. Returns 200 on success or 404 if not found."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                  "var json = pm.response.json();",
                  "pm.test('ID still present', function () { pm.expect(json.id).to.be.a('number'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{user_id}}"]
            },
            "description": "Deletes the user by ID. Returns 204 or 404."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status is 204', function () { pm.response.to.have.status(204); });"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}