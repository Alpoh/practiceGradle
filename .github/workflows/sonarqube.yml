name: SonarQube Analysis

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

permissions:
  contents: read
  pull-requests: read
  checks: write

jobs:
  sonarqube:
    name: Build, Test, and Analyze with SonarQube
    runs-on: ubuntu-latest
    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Make Gradle wrapper executable
        run: chmod +x gradlew

      - name: Build, Test and Coverage
        run: |
          ./gradlew --version
          ./gradlew clean test jacocoTestReport

      - name: Normalize Sonar host URL
        if: ${{ env.SONAR_HOST_URL != '' && env.SONAR_TOKEN != '' }}
        shell: bash
        run: |
          URL="${SONAR_HOST_URL}"
          # If URL starts with a slash or is missing a scheme, default to SonarCloud
          if [[ "$URL" == /* ]] || [[ ! "$URL" =~ ^https?:// ]]; then
            echo "SONAR_HOST_URL=https://sonarcloud.io" >> "$GITHUB_ENV"
            echo "Using default Sonar host URL: https://sonarcloud.io"
          else
            echo "SONAR_HOST_URL=$URL" >> "$GITHUB_ENV"
          fi

      - name: Check Sonar host reachability
        id: reach
        if: ${{ env.SONAR_HOST_URL != '' && env.SONAR_TOKEN != '' }}
        shell: bash
        run: |
          URL="${SONAR_HOST_URL}"
          echo "Checking reachability of $URL"
          if curl -I --max-time 10 "$URL" >/dev/null 2>&1; then
            echo "reachable=true" >> $GITHUB_OUTPUT
          else
            echo "reachable=false" >> $GITHUB_OUTPUT
            echo "Sonar host not reachable; skipping scan."
          fi

      - name: Prepare Sonar properties (projectKey/organization)
        id: sonarvars
        if: ${{ env.SONAR_HOST_URL != '' && env.SONAR_TOKEN != '' && steps.reach.outputs.reachable == 'true' }}
        shell: bash
        run: |
          KEY="${{ vars.SONAR_PROJECT_KEY }}"
          ORG="${{ vars.SONAR_ORGANIZATION }}"
          if [ -z "$KEY" ]; then
            # Derive a default key from owner and repo, replacing unsupported chars with underscores
            KEY="${{ github.repository_owner }}_${{ github.event.repository.name }}"
            KEY=${KEY//-/_}
            KEY=${KEY//\//_}
          fi
          if [ -z "$ORG" ]; then
            # Default organization to the repository owner
            ORG="${{ github.repository_owner }}"
          fi
          echo "args=-Dsonar.projectKey=$KEY -Dsonar.organization=$ORG" >> $GITHUB_OUTPUT

      - name: SonarQube Scan
        if: ${{ env.SONAR_HOST_URL != '' && env.SONAR_TOKEN != '' && steps.reach.outputs.reachable == 'true' }}
        uses: SonarSource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        with:
          args: ${{ steps.sonarvars.outputs.args }}

      - name: SonarQube Quality Gate
        if: ${{ env.SONAR_HOST_URL != '' && env.SONAR_TOKEN != '' && steps.reach.outputs.reachable == 'true' && success() }}
        uses: SonarSource/sonarqube-quality-gate-action@v1
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
